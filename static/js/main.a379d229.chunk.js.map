{"version":3,"sources":["components/UserList.tsx","api/fetchClient.ts","services/color.service.ts","components/AddUserForm.tsx","components/AppContainer.tsx","services/user.service.ts","App.tsx","index.tsx"],"names":["UserList","React","memo","users","map","user","ListItemButton","ListItemIcon","fontSize","style","color","carColor","name","ListItemText","primary","id","client","axios","create","baseURL","headers","a","get","response","data","AddUserForm","addUser","useState","setName","colorId","setColorId","isNameError","setIsNameError","isColorError","setIsColorError","colors","setColors","useEffect","getColors","then","selectedColor","find","c","onSubmit","e","preventDefault","Divider","padding","display","alignItems","justifyContent","TextField","variant","label","width","value","onChange","target","error","Select","MenuItem","disabled","LoadingButton","type","AppContainer","children","Paper","elevation","marginTop","marginInline","Typography","textAlign","marginBottom","carColorId","post","App","setUsers","userService","newUser","prev","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gUASaA,EAAsBC,IAAMC,MAAK,YAAgB,IAAbC,EAAY,EAAZA,MAC/C,OACE,mCACGA,EAAMC,KAAI,SAAAC,GAAI,aACb,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAAC,IAAD,CAAyBC,SAAS,QAAQC,MAAO,CAAEC,OAAW,OAAJL,QAAI,IAAJA,GAAA,UAAAA,EAAMM,gBAAN,eAAgBC,OAAQ,aAEpF,cAACC,EAAA,EAAD,CAAcC,QAAST,EAAKO,SAJTP,EAAKU,GADb,KAUpB,I,6CCnBYC,E,OAASC,EAAMC,OAAO,CACjCC,QAAS,wBACTC,QAAS,CACP,eAAgB,sB,4CCHb,4BAAAC,EAAA,sEACkBL,EAAOM,IAAa,WADtC,cACCC,EADD,yBAGEA,EAASC,MAHX,4C,sBCSA,IAAMC,EAA+B,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC7C,EAAwBC,mBAAS,IAAjC,mBAAOf,EAAP,KAAagB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAAsCH,oBAAS,GAA/C,mBAAOI,EAAP,KAAoBC,EAApB,KACA,EAAwCL,oBAAS,GAAjD,mBAAOM,EAAP,KAAqBC,EAArB,KACA,EAA4BP,mBAAkB,IAA9C,mBAAOQ,EAAP,KAAeC,EAAf,KAEAC,qBAAU,YDhBL,WAAP,gCCiBIC,GAAYC,KAAKH,EAClB,GAAE,IAEH,IAAMI,EAAgBL,EAAOM,MAAK,SAAAC,GAAC,OAAIA,EAAE3B,KAAOc,CAAb,IAgBnC,OACE,uBACEc,SAAU,SAAAC,GACRA,EAAEC,iBAjBS,WACf,IAAKjC,IAASiB,EAIZ,OAHAG,GAAgBpB,QAChBsB,GAAiBL,GAKnBH,EAAQd,EAAMiB,GAEdD,EAAQ,IACRE,EAAW,EACZ,CAMKa,EACD,EAJH,UAME,cAACG,EAAA,EAAD,IAEA,sBACErC,MAAO,CACLsC,QAAS,cACTC,QAAS,OACTC,WAAY,MACZC,eAAgB,iBALpB,UAQE,cAACC,EAAA,EAAD,CACEC,QAAQ,WACRC,MAAM,OACN5C,MAAO,CAAE6C,MAAO,OAChBC,MAAO3C,EACP4C,SAAU,SAAAZ,GACRhB,EAAQgB,EAAEa,OAAOF,OACjBvB,GAAe,EAChB,EACD0B,MAAO3B,IAGT,eAAC4B,EAAA,EAAD,CACEN,MAAM,YACN5C,MAAO,CAAE6C,MAAO,MAAO5C,OAAoB,OAAb8B,QAAa,IAAbA,OAAA,EAAAA,EAAe5B,OAAQ,gBACrDwC,QAAQ,WACRG,MAAO1B,EACP2B,SAAU,SAAAZ,GACRV,GAAgB,GAChBJ,GAAYc,EAAEa,OAAOF,MACtB,EACDG,MAAOzB,EATT,UAWE,cAAC2B,EAAA,EAAD,CAAUL,MAAO,EAAGM,UAAQ,EAA5B,SAA6B,UAG5B1B,EAAO/B,KAAI,SAAAM,GAAK,OACf,cAACkD,EAAA,EAAD,CAEEnD,MAAO,CAAEC,MAAOA,EAAME,MACtB2C,MAAO7C,EAAMK,GAHf,SAKGL,EAAME,MAJFF,EAAMK,GAFE,UAWrB,cAAC+C,EAAA,EAAD,CAAeC,KAAK,SAASX,QAAQ,WAAW3C,MAAO,CAAE6C,MAAO,QAAhE,SAA0E,qBAK/E,E,iBC3FYU,EAA0B/D,IAAMC,MAAK,YAAmB,IAAhB+D,EAAe,EAAfA,SACnD,OACE,eAACC,EAAA,EAAD,CACEC,UAAW,GACX1D,MAAO,CACLsC,QAAS,OACTO,MAAO,MACPc,UAAW,OACXC,aAAc,QANlB,UASE,cAACC,EAAA,EAAD,CACElB,QAAQ,KACR3C,MAAO,CAAE8D,UAAW,SAAUC,aAAc,QAF9C,SAGC,iBAKAP,EAED,cAACnB,EAAA,EAAD,MAGL,I,4CC5BM,4BAAAzB,EAAA,sEACkBL,EAAOM,IAAY,UADrC,cACCC,EADD,yBAGEA,EAASC,MAHX,4C,sBAwBA,SAAeE,EAAtB,kC,4CAAO,iCAAAL,EAAA,6DAAyBT,EAAzB,EAAyBA,KAAM6D,EAA/B,EAA+BA,WAA/B,SACkBzD,EAAO0D,KAAW,SAAU,CAAE9D,OAAM6D,eADtD,cACClD,EADD,yBAGEA,EAASC,MAHX,4C,sBCnBA,IAAMmD,EAAgB,WAC3B,MAA0BhD,mBAAiB,IAA3C,mBAAOxB,EAAP,KAAcyE,EAAd,KAEAvC,qBAAU,YDRL,WAAP,gCCSIwC,GAAuBtC,KAAKqC,EAC7B,GAAE,IAEH,IAAMlD,EAAO,uCAAG,WAAOd,EAAc6D,GAArB,eAAApD,EAAA,sEACQwD,EAAoB,CAAEjE,OAAM6D,eADpC,OACRK,EADQ,OAGdF,GAAS,SAAAG,GAAI,4BAAQA,GAAR,CAAcD,GAAd,IAHC,2CAAH,wDAMb,OACE,eAACd,EAAD,WACE,cAAChE,EAAD,CAAUG,MAAOA,IAEjB,cAAC,EAAD,CAAauB,QAASA,MAG3B,ECvBDsD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,Q","file":"static/js/main.a379d229.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { ListItemButton, ListItemIcon, ListItemText } from '@mui/material';\nimport DirectionsCarFilledIcon from '@mui/icons-material/DirectionsCarFilled';\nimport { User } from '../types';\n\ninterface Props {\n  users: User[];\n}\n\nexport const UserList: FC<Props> = React.memo(({ users }) => {\n  return (\n    <>\n      {users.map(user => (\n        <ListItemButton key={user.id}>\n          <ListItemIcon>\n            <DirectionsCarFilledIcon fontSize=\"large\" style={{ color: user?.carColor?.name || 'black' }} />\n          </ListItemIcon>\n          <ListItemText primary={user.name} />\n        </ListItemButton>\n      ))}\n    </>\n  );\n});\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport axios from 'axios';\n\nexport const client = axios.create({\n  baseURL: 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n","import { client } from '../api/fetchClient';\nimport { Color } from '../types';\n\nexport async function getColors() {\n  const response = await client.get<Color[]>('/colors');\n\n  return response.data;\n}\n","import React, { useEffect, useState } from 'react';\nimport {\n  Divider, MenuItem, Select, TextField,\n} from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\nimport { Color } from '../types';\nimport { getColors } from '../services/color.service';\n\ninterface Props {\n  addUser: (name: string, carColorId: number) => void;\n}\n\nexport const AddUserForm: React.FC<Props> = ({ addUser }) => {\n  const [name, setName] = useState('');\n  const [colorId, setColorId] = useState(0);\n  const [isNameError, setIsNameError] = useState(false);\n  const [isColorError, setIsColorError] = useState(false);\n  const [colors, setColors] = useState<Color[]>([]);\n\n  useEffect(() => {\n    getColors().then(setColors);\n  }, []);\n\n  const selectedColor = colors.find(c => c.id === colorId);\n\n  const onSubmit = () => {\n    if (!name || !colorId) {\n      setIsNameError(!name);\n      setIsColorError(!colorId);\n\n      return;\n    }\n\n    addUser(name, colorId);\n\n    setName('');\n    setColorId(0);\n  };\n\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault();\n        onSubmit();\n      }}\n    >\n      <Divider />\n\n      <div\n        style={{\n          padding: '16px 0 16px',\n          display: 'flex',\n          alignItems: 'end',\n          justifyContent: 'space-between',\n        }}\n      >\n        <TextField\n          variant=\"standard\"\n          label=\"Name\"\n          style={{ width: '45%' }}\n          value={name}\n          onChange={e => {\n            setName(e.target.value);\n            setIsNameError(false);\n          }}\n          error={isNameError}\n        />\n\n        <Select\n          label=\"Car color\"\n          style={{ width: '45%', color: selectedColor?.name || 'currentColor' }}\n          variant=\"standard\"\n          value={colorId}\n          onChange={e => {\n            setIsColorError(false);\n            setColorId(+e.target.value);\n          }}\n          error={isColorError}\n        >\n          <MenuItem value={0} disabled>\n            Color\n          </MenuItem>\n          {colors.map(color => (\n            <MenuItem\n              key={color.id}\n              style={{ color: color.name }}\n              value={color.id}\n            >\n              {color.name}\n            </MenuItem>\n          ))}\n        </Select>\n      </div>\n      <LoadingButton type=\"submit\" variant=\"outlined\" style={{ width: '100%' }}>\n        Add new player\n      </LoadingButton>\n    </form>\n  );\n};\n","import React, { FC } from 'react';\nimport { Divider, Paper, Typography } from '@mui/material';\n\ninterface Props {\n  children: React.ReactNode\n}\n\nexport const AppContainer: FC<Props> = React.memo(({ children }) => {\n  return (\n    <Paper\n      elevation={10}\n      style={{\n        padding: '20px',\n        width: '90%',\n        marginTop: '40px',\n        marginInline: 'auto',\n      }}\n    >\n      <Typography\n        variant=\"h2\"\n        style={{ textAlign: 'center', marginBottom: '16px' }}\n      >\n        Users`\n        board\n      </Typography>\n\n      {children}\n\n      <Divider />\n    </Paper>\n  );\n});\n","import { client } from '../api/fetchClient';\nimport { User } from '../types';\n\nexport async function getUsers() {\n  const response = await client.get<User[]>('/users');\n\n  return response.data;\n}\n\nexport async function getUser(id: number) {\n  const response = await client.get<User>(`/users/${id}`);\n\n  return response.data;\n}\n\nexport async function updateUser(user: User) {\n  const response = await client.put<User>('/users', user);\n\n  return response.data;\n}\n\nexport async function deleteUser(id: number) {\n  const response = await client.delete<User>(`/users/${id}`);\n\n  return response.data;\n}\n\nexport async function addUser({ name, carColorId }: Pick<User, 'name' | 'carColorId'>) {\n  const response = await client.post<User>('/users', { name, carColorId });\n\n  return response.data;\n}\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport { UserList } from './components/UserList';\nimport { AddUserForm } from './components/AddUserForm';\nimport { AppContainer } from './components/AppContainer';\nimport { User } from './types';\nimport * as userService from './services/user.service';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    userService.getUsers().then(setUsers);\n  }, []);\n\n  const addUser = async (name: string, carColorId: number) => {\n    const newUser = await userService.addUser({ name, carColorId });\n\n    setUsers(prev => [...prev, newUser]);\n  };\n\n  return (\n    <AppContainer>\n      <UserList users={users} />\n\n      <AddUserForm addUser={addUser} />\n    </AppContainer>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}